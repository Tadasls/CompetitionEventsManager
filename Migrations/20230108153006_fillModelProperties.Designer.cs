// <auto-generated />
using System;
using CompetitionEventsManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompetitionEventsManager.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20230108153006_fillModelProperties")]
    partial class fillModelProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("CompetitionEventsManager.Models.Horse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Breed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Breeder")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ChipNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commets")
                        .HasColumnType("TEXT");

                    b.Property<string>("FEIID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Father")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Heigth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HorseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocalUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("MedCheckDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mother")
                        .HasColumnType("TEXT");

                    b.Property<string>("NatFedID")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PassportNoExipreDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("YearOfBird")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalUserId");

                    b.ToTable("Horses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HorseName = "The King",
                            OwnerName = "Stasys"
                        },
                        new
                        {
                            Id = 2,
                            HorseName = "Perkunas",
                            OwnerName = "Stasys"
                        },
                        new
                        {
                            Id = 3,
                            HorseName = "Nabagute",
                            OwnerName = "Linas"
                        });
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.LocalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adress")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultComunicationLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WasOnline")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LocalUsers");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocalUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("NotificationID");

                    b.HasIndex("LocalUserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Performance", b =>
                {
                    b.Property<int>("PerformanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("HorseBirthYear")
                        .HasColumnType("TEXT");

                    b.Property<int>("HorseID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HorseName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReservationID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RiderFullName")
                        .HasColumnType("TEXT");

                    b.Property<int>("RiderID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Time")
                        .HasColumnType("REAL");

                    b.Property<string>("TraiCommetsning")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Training")
                        .HasColumnType("INTEGER");

                    b.HasKey("PerformanceID");

                    b.HasIndex("HorseID");

                    b.HasIndex("ReservationID");

                    b.HasIndex("RiderID");

                    b.ToTable("Performance");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AgreemntOnContractNr1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocalUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("NeedElectricity")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("NeedInvoice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlateNumbers")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Shavings")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StayFromDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StayToDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("numberOfCages")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReservationID");

                    b.HasIndex("LocalUserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Rider", b =>
                {
                    b.Property<int>("RiderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FEIID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InsuranceExiprationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocalUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("MedCheckDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NationalFederationID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RidersClubName")
                        .HasColumnType("TEXT");

                    b.HasKey("RiderID");

                    b.HasIndex("LocalUserId");

                    b.ToTable("Riders");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Horse", b =>
                {
                    b.HasOne("CompetitionEventsManager.Models.LocalUser", null)
                        .WithMany("Horses")
                        .HasForeignKey("LocalUserId");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Notification", b =>
                {
                    b.HasOne("CompetitionEventsManager.Models.LocalUser", null)
                        .WithMany("Notifications")
                        .HasForeignKey("LocalUserId");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Performance", b =>
                {
                    b.HasOne("CompetitionEventsManager.Models.Horse", "Horse")
                        .WithMany()
                        .HasForeignKey("HorseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionEventsManager.Models.Reservation", null)
                        .WithMany("Performances")
                        .HasForeignKey("ReservationID");

                    b.HasOne("CompetitionEventsManager.Models.Rider", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Reservation", b =>
                {
                    b.HasOne("CompetitionEventsManager.Models.LocalUser", null)
                        .WithMany("Reservations")
                        .HasForeignKey("LocalUserId");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Rider", b =>
                {
                    b.HasOne("CompetitionEventsManager.Models.LocalUser", null)
                        .WithMany("Riders")
                        .HasForeignKey("LocalUserId");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.LocalUser", b =>
                {
                    b.Navigation("Horses");

                    b.Navigation("Notifications");

                    b.Navigation("Reservations");

                    b.Navigation("Riders");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Reservation", b =>
                {
                    b.Navigation("Performances");
                });
#pragma warning restore 612, 618
        }
    }
}
