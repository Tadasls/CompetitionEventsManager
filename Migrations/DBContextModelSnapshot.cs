// <auto-generated />
using System;
using CompetitionEventsManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompetitionEventsManager.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("CompetitionEventsManager.Models.Competition", b =>
                {
                    b.Property<int>("CompetitionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdditionalTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArenaType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Article")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BreakTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Class")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompetitionType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfJumps")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumberOfObstackles")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Phase")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PointsForExeedindTimeLimit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SecToStart")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SheduledRunTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SheduledStartTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TimeAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeBeetweenRuns")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CompetitionID");

                    b.ToTable("Competitions");

                    b.HasData(
                        new
                        {
                            CompetitionID = 1,
                            AdditionalTime = 5,
                            ArenaType = "Maniezas",
                            Article = "Art.238.2.1 ",
                            BreakTime = 10,
                            Class = "ATVIRA KLASĖ",
                            CompetitionType = "lentelė A",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2017),
                            Number = "1A. ",
                            NumberOfJumps = 10,
                            NumberOfObstackles = 8,
                            Phase = 1,
                            PointsForExeedindTimeLimit = 1,
                            SecToStart = 45,
                            SheduledRunTime = 2,
                            TimeBeetweenRuns = 2,
                            Title = "Art.238.2.1 Konkūras pagal laiką, lentelė A"
                        },
                        new
                        {
                            CompetitionID = 2,
                            AdditionalTime = 5,
                            ArenaType = "Maniezas",
                            Article = "Art.238.2.1 ",
                            BreakTime = 10,
                            Class = "ATVIRA KLASĖ",
                            CompetitionType = "lentelė A",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2017),
                            Number = "3. ",
                            NumberOfJumps = 10,
                            NumberOfObstackles = 8,
                            Phase = 1,
                            PointsForExeedindTimeLimit = 1,
                            SecToStart = 45,
                            SheduledRunTime = 2,
                            TimeBeetweenRuns = 2,
                            Title = "Art.238.2.1 Konkūras pagal laiką, lentelė A"
                        },
                        new
                        {
                            CompetitionID = 3,
                            AdditionalTime = 5,
                            ArenaType = "Maniezas",
                            Article = "Art.238.2.1 ",
                            BreakTime = 10,
                            Class = "ATVIRA KLASĖ",
                            CompetitionType = "lentelė A",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2017),
                            Number = "5 ",
                            NumberOfJumps = 13,
                            NumberOfObstackles = 10,
                            Phase = 2,
                            PointsForExeedindTimeLimit = 1,
                            SecToStart = 45,
                            SheduledRunTime = 2,
                            TimeBeetweenRuns = 2,
                            Title = "Art.274.2.5 Dviejų fazių konkūras (Lentelė A, pagal laiką abejose fazėse"
                        });
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Entry", b =>
                {
                    b.Property<int>("EntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AgreemntOnContractNr1")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("NeedElectricity")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("NeedInvoice")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumberOfCages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlateNumbers")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Shavings")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StayFromDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StayToDate")
                        .HasColumnType("TEXT");

                    b.HasKey("EntryID");

                    b.ToTable("Entries");

                    b.HasData(
                        new
                        {
                            EntryID = 1,
                            AgreemntOnContractNr1 = true,
                            NeedElectricity = false,
                            NeedInvoice = false,
                            NumberOfCages = 1,
                            PlateNumbers = "KEK:511",
                            Shavings = false,
                            StayFromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2022),
                            StayToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2018)
                        },
                        new
                        {
                            EntryID = 2,
                            AgreemntOnContractNr1 = false,
                            NeedElectricity = false,
                            NeedInvoice = true,
                            NumberOfCages = 2,
                            PlateNumbers = "KEK:515",
                            Shavings = true,
                            StayFromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2022),
                            StayToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2018)
                        },
                        new
                        {
                            EntryID = 3,
                            AgreemntOnContractNr1 = true,
                            NeedElectricity = true,
                            NeedInvoice = false,
                            NumberOfCages = 5,
                            PlateNumbers = "",
                            Shavings = false,
                            StayFromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2021),
                            StayToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2017)
                        });
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Organizer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Place")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("EventID");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventID = 1,
                            Country = "LT",
                            Currency = "Eur",
                            Organizer = "Harmony Park",
                            Place = "Vazgaikiemis",
                            Title = "LTU-3* Lietuvos Taurė I etapas"
                        },
                        new
                        {
                            EventID = 2,
                            Country = "LT",
                            Currency = "Eur",
                            Organizer = "Audruvis",
                            Place = "Joniškio raj.",
                            Title = "LTU-3* Audruvis Equistore 2 nd Birthday Cup "
                        },
                        new
                        {
                            EventID = 3,
                            Country = "LT",
                            Currency = "Eur",
                            Organizer = "Dargužiai",
                            Place = "Dargužiai",
                            Title = "CSI1*, CSIOJ, CSICh-A, CSIOCh, CSIP, CSIU25YJ-A"
                        });
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Horse", b =>
                {
                    b.Property<int>("HorseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Breed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Breeder")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChipNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commets")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("FEIID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Father")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Heigth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HorseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MedCheckDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mother")
                        .HasColumnType("TEXT");

                    b.Property<string>("NatFedID")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PassportNoExipreDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("YearOfBird")
                        .HasColumnType("TEXT");

                    b.HasKey("HorseID");

                    b.ToTable("Horses");

                    b.HasData(
                        new
                        {
                            HorseID = 1,
                            Breed = "Lietuvos sunkusis",
                            Color = "^irma",
                            Country = "LT",
                            Gender = "Kastratas",
                            HorseName = "Kingas",
                            OwnerName = "S. Laurinaitis",
                            YearOfBird = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1008)
                        },
                        new
                        {
                            HorseID = 2,
                            Breed = "Ristunas",
                            Color = "Juoda",
                            Country = "LT",
                            Gender = "Kastratas",
                            HorseName = "Perkūnas",
                            OwnerName = "S. Laurinaitis",
                            YearOfBird = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1009)
                        },
                        new
                        {
                            HorseID = 3,
                            Breed = "KWPN",
                            Breeder = "E.Onrust",
                            ChipNumber = "528003 06.06881",
                            Color = "Širma",
                            Country = "Olandija",
                            Father = "Silverstone",
                            Gender = "Kastratas",
                            HorseName = "Baltasar",
                            Mother = "Sally",
                            NatFedID = "1700034",
                            OwnerName = "Virginijus Praškevičius",
                            PassportNo = "528003 06.06881",
                            YearOfBird = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1972)
                        },
                        new
                        {
                            HorseID = 4,
                            Breed = "Zangersheide",
                            ChipNumber = "528003 06.06881",
                            Color = "Širma",
                            Country = "Belgija",
                            Father = "CORONAS",
                            Gender = "Eržilas",
                            HorseName = "Cassander Z",
                            Mother = "ANDIENA VH ASDONK ET Z",
                            NatFedID = "1700034",
                            OwnerName = "Valdas Urbonas",
                            PassportNo = "528003 06.06881",
                            YearOfBird = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1981)
                        },
                        new
                        {
                            HorseID = 5,
                            Breed = "Žemaitukai",
                            Breeder = "Stasys Svetlauskas",
                            Color = "Bėra",
                            Country = "Belgija",
                            Father = "Koralas",
                            Gender = "Kumelė",
                            HorseName = "Kamanė",
                            Mother = "Kražė",
                            NatFedID = "1700025",
                            OwnerName = "Ernesta Valaitienė",
                            PassportNo = "LTU003210052706",
                            YearOfBird = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2004)
                        },
                        new
                        {
                            HorseID = 6,
                            Breed = "Lietuvos jojamųjų",
                            Breeder = "Egidijus Civinskas",
                            Color = "Juodbėra",
                            Country = "Lietuva",
                            Father = "Laralee",
                            Gender = "Kastratas",
                            HorseName = "Kamanė",
                            Mother = "Ela",
                            NatFedID = "15444",
                            OwnerName = "Gabrielė Stasiulionytė",
                            PassportNo = "029272",
                            YearOfBird = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1987)
                        });
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.LocalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WasOnline")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LocalUsers");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationID = 1,
                            Message = "Prasome atlikti Vet patikra",
                            Status = false,
                            Topic = "Vet Patikra"
                        },
                        new
                        {
                            NotificationID = 2,
                            Message = "Prasome atlikti Vet patikra",
                            Status = true,
                            Topic = "Vet Patikra"
                        },
                        new
                        {
                            NotificationID = 3,
                            Message = "Prasome atlikti Vet patikra",
                            Status = false,
                            Topic = "Vet Patikra"
                        },
                        new
                        {
                            NotificationID = 4,
                            Message = "Prasome patiklinti starto laika",
                            Status = false,
                            Topic = "Pakeistas Starto Laikas"
                        },
                        new
                        {
                            NotificationID = 5,
                            Message = "Prasome atlikti Vet patikra",
                            Status = true,
                            Topic = "Vet Patikra"
                        },
                        new
                        {
                            NotificationID = 6,
                            Message = "Prasome patiklinti starto laika",
                            Status = false,
                            Topic = "Pakeistas Starto Laikas"
                        },
                        new
                        {
                            NotificationID = 7,
                            Message = "Prasome patiklinti starto laika",
                            Status = false,
                            Topic = "Pakeistas Starto Laikas"
                        });
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Performance", b =>
                {
                    b.Property<int>("PerformanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("HorseBirthYear")
                        .HasColumnType("TEXT");

                    b.Property<int>("HorseID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HorseName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RiderFullName")
                        .HasColumnType("TEXT");

                    b.Property<int>("RiderID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Time")
                        .HasColumnType("REAL");

                    b.Property<bool?>("Training")
                        .HasColumnType("INTEGER");

                    b.HasKey("PerformanceID");

                    b.HasIndex("HorseID");

                    b.HasIndex("RiderID");

                    b.ToTable("Performances");

                    b.HasData(
                        new
                        {
                            PerformanceID = 1,
                            HorseID = 1,
                            HorseName = "The King",
                            Points = 0,
                            RiderFullName = "Linas Balciunas",
                            RiderID = 1,
                            Time = 0.0,
                            Training = false
                        },
                        new
                        {
                            PerformanceID = 2,
                            HorseID = 2,
                            HorseName = "Perkunas",
                            Points = 0,
                            RiderFullName = "S Laurinaitis",
                            RiderID = 2,
                            Time = 0.0,
                            Training = false
                        },
                        new
                        {
                            PerformanceID = 3,
                            HorseID = 3,
                            HorseName = "Nabagute",
                            Points = 0,
                            RiderFullName = "Z Sarka",
                            RiderID = 3,
                            Time = 0.0,
                            Training = true
                        });
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Rider", b =>
                {
                    b.Property<int>("RiderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FEIID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InsuranceExiprationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MedCheckDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NationalFederationID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RidersClubName")
                        .HasColumnType("TEXT");

                    b.HasKey("RiderID");

                    b.ToTable("Riders");

                    b.HasData(
                        new
                        {
                            RiderID = 1,
                            Country = "LT",
                            FirstName = "Andrius",
                            LastName = "Petrovas"
                        },
                        new
                        {
                            RiderID = 2,
                            Country = "LT",
                            FirstName = "Matas",
                            LastName = "Petraitis"
                        },
                        new
                        {
                            RiderID = 3,
                            Country = "LT",
                            FirstName = "Kristupas",
                            LastName = "Petraitis"
                        },
                        new
                        {
                            RiderID = 4,
                            Country = "LT",
                            FirstName = "Nerijus",
                            LastName = "Šipaila"
                        },
                        new
                        {
                            RiderID = 5,
                            Country = "LT",
                            FirstName = "Kostas",
                            LastName = "Gaigalas"
                        },
                        new
                        {
                            RiderID = 6,
                            Country = "LT",
                            FirstName = "Laura",
                            LastName = "Martinavičiūtė"
                        },
                        new
                        {
                            RiderID = 7,
                            Country = "LT",
                            FirstName = "Danielius",
                            LastName = "Gutkauskas"
                        },
                        new
                        {
                            RiderID = 8,
                            Country = "LT",
                            FirstName = "Evita",
                            LastName = "Vismerytė"
                        },
                        new
                        {
                            RiderID = 9,
                            Country = "LT",
                            FirstName = "Karolina ",
                            LastName = "Vasiliauskaite"
                        });
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("FeiID")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.HasKey("StaffID");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            StaffID = 1,
                            Country = "LT",
                            FeiID = "FEI Level 1",
                            FirstName = "Marijonas",
                            Lastname = "Raila",
                            NationalID = "",
                            Position = "Ground Jury"
                        },
                        new
                        {
                            StaffID = 2,
                            Country = "LT",
                            FeiID = "",
                            FirstName = "Daiva",
                            Lastname = "Leonavičiūtė",
                            NationalID = "L3",
                            Position = "Jury"
                        },
                        new
                        {
                            StaffID = 3,
                            Country = "LT",
                            FeiID = "",
                            FirstName = "Ladas",
                            Lastname = "Katinas",
                            NationalID = "I NK",
                            Position = "Stuart"
                        });
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Competition", b =>
                {
                    b.HasOne("CompetitionEventsManager.Models.Performance", "Performance")
                        .WithMany("Competitions")
                        .HasForeignKey("CompetitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionEventsManager.Models.Staff", "Staff")
                        .WithMany("Competitions")
                        .HasForeignKey("CompetitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performance");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Entry", b =>
                {
                    b.HasOne("CompetitionEventsManager.Models.Performance", "Performances")
                        .WithMany("Entries")
                        .HasForeignKey("EntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performances");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Event", b =>
                {
                    b.HasOne("CompetitionEventsManager.Models.Competition", "Competition")
                        .WithMany("Events")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.LocalUser", b =>
                {
                    b.HasOne("CompetitionEventsManager.Models.Entry", "Entry")
                        .WithMany("LocalUsers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionEventsManager.Models.Horse", "Horse")
                        .WithMany("LocalUsers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionEventsManager.Models.Notification", "Notification")
                        .WithMany("LocalUsers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionEventsManager.Models.Rider", "Rider")
                        .WithMany("LocalUsers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");

                    b.Navigation("Horse");

                    b.Navigation("Notification");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Performance", b =>
                {
                    b.HasOne("CompetitionEventsManager.Models.Horse", "Horse")
                        .WithMany()
                        .HasForeignKey("HorseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionEventsManager.Models.Rider", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Competition", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Entry", b =>
                {
                    b.Navigation("LocalUsers");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Horse", b =>
                {
                    b.Navigation("LocalUsers");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Notification", b =>
                {
                    b.Navigation("LocalUsers");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Performance", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Rider", b =>
                {
                    b.Navigation("LocalUsers");
                });

            modelBuilder.Entity("CompetitionEventsManager.Models.Staff", b =>
                {
                    b.Navigation("Competitions");
                });
#pragma warning restore 612, 618
        }
    }
}
